using System;
using System.Runtime.InteropServices;

namespace MetaPod_Net
{
    internal static class NativeWrapper
    {
        /// <summary>
        /// The location of the metapod.so file generated by Go build.
        /// Currently only 64 bit is supported.
        /// </summary>
        private const string LibraryName = "metapod64.so";
        
        /// <summary>
        /// Opens a MetaPod executable for the purpose of reading its payload.
        /// </summary>
        /// <param name="portableExecutable">The MetaPod portable executable buffer.</param>
        /// <param name="portableExecutableSize">The total size of the MetaPod executable.</param>
        /// <param name="payload">A managed pointer to the payload results.</param>
        /// <param name="payloadSize">The length of the payload string.</param>
        /// <returns></returns>
        [DllImport(LibraryName, CharSet = CharSet.Unicode, CallingConvention = CallingConvention.Cdecl)]
        internal static extern int Open(byte[] portableExecutable, int portableExecutableSize, ref IntPtr payload, ref int payloadSize);

        /// <summary>
        /// Grabs the human-readable error message from an error code.
        /// </summary>
        /// <param name="errorCode">The target error code.</param>
        /// <param name="errorMessage">The human-readable message pointer.</param>
        /// <returns></returns>
        [DllImport(LibraryName, CharSet = CharSet.Unicode, CallingConvention = CallingConvention.Cdecl)]
        internal static extern int GetErrorCodeMessage(int errorCode, ref IntPtr errorMessage);
        
        /// <summary>
        /// Creates a MetaPod portable executable from a base template. The template must already be digitally signed.
        /// </summary>
        /// <param name="template">The input/template portable executable.</param>
        /// <param name="templateSize">The total size of the input file.</param>
        /// <param name="payload">The payload message.</param>
        /// <param name="output">A managed pointer to the portable executable buffer.</param>
        /// <param name="outputSize">The total bytes of the final portable executable.</param>
        /// <returns>The error code, if any.</returns>
        [DllImport(LibraryName, CharSet = CharSet.Unicode, CallingConvention = CallingConvention.Cdecl)]
        internal static extern int Create(byte[] template, int templateSize, byte[] payload, ref IntPtr output, ref int outputSize);
    }
}