using System;
using System.Runtime.InteropServices;

namespace MetaPod_Net
{
    internal static class NativeWrapper
    {
        /// <summary>
        /// The location of the metapod.so file generated by Go build.
        /// Currently only 64 bit is supported.
        /// </summary>
        private const string LibraryName = "metapod64.so";

   
       /// <summary>
       /// Opens a MetaPod executable for the purpose of reading its payload.
       /// </summary>
       /// <param name="portableExecutalbe"></param>
       /// <param name="length"></param>
       /// <param name="payload"></param>
       /// <param name="errorCode"></param>
       /// <returns></returns>
        [DllImport(LibraryName, CharSet = CharSet.Unicode, CallingConvention = CallingConvention.Cdecl)]
        internal static extern int Open(byte[] portableExecutalbe, int length, ref IntPtr payload, ref int errorCode);

        /// <summary>
        /// Returns the human-readable string for an error code.
        /// </summary>
        /// <param name="errorCode"></param>
        /// <param name="errorMessage"></param>
        /// <returns></returns>
         [DllImport(LibraryName, CharSet = CharSet.Unicode, CallingConvention = CallingConvention.Cdecl)]
         internal static extern int GetErrorCodeMessage(int errorCode, ref IntPtr errorMessage);
        
        /// <summary>
        /// Creates a MetaPod portable executable from a base template. The template must already be digitally signed. 
        /// </summary>
        /// <param name="template"></param>
        /// <param name="length"></param>
        /// <param name="payload"></param>
        /// <param name="output"></param>
        /// <param name="errorCode"></param>
        /// <returns></returns>
        [DllImport(LibraryName, CharSet = CharSet.Unicode, CallingConvention = CallingConvention.Cdecl)]
        internal static extern int Create(byte[] template, int length, byte[] payload, ref IntPtr output, ref int errorCode);
    }
}